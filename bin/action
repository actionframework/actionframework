#!/usr/bin/env ruby
require 'optitron'
require 'fileutils'
require 'actionframework'
require 'json'
require 'httparty'

class String
def black;          "\033[30m#{self}\033[0m" end
def red;            "\033[31m#{self}\033[0m" end
def green;          "\033[32m#{self}\033[0m" end
def  brown;         "\033[33m#{self}\033[0m" end
def blue;           "\033[34m#{self}\033[0m" end
def magenta;        "\033[35m#{self}\033[0m" end
def cyan;           "\033[36m#{self}\033[0m" end
def gray;           "\033[37m#{self}\033[0m" end
def bg_black;       "\033[40m#{self}\0330m"  end
def bg_red;         "\033[41m#{self}\033[0m" end
def bg_green;       "\033[42m#{self}\033[0m" end
def bg_brown;       "\033[43m#{self}\033[0m" end
def bg_blue;        "\033[44m#{self}\033[0m" end
def bg_magenta;     "\033[45m#{self}\033[0m" end
def bg_cyan;        "\033[46m#{self}\033[0m" end
def bg_gray;        "\033[47m#{self}\033[0m" end
def bold;           "\033[1m#{self}\033[22m" end
def reverse_color;  "\033[7m#{self}\033[27m" end
end

class ActionFrameworkCLI < Optitron::CLI
	desc "About ActionFramework"
	def about
		puts "ActionFramework (previously called ActionFramework) is a web application framework that tries to be as flexible as sinatra and at the same time have the structure of rails.Enjoy!"
	end
	desc "Create ActionFramework project"
	def new projectname
		puts "Creating project directory and structure"
		Dir.mkdir("#{projectname}")
		Dir.mkdir("#{projectname}/controllers")
		Dir.mkdir("#{projectname}/models")
		Dir.mkdir("#{projectname}/views")
		Dir.mkdir("#{projectname}/config")
		Dir.mkdir("#{projectname}/static")
		Dir.mkdir("#{projectname}/initializers")
		FileUtils.touch("#{projectname}/views/layout.html.erb")
		FileUtils.touch("#{projectname}/Gemfile")
		File.write("#{projectname}/main.rb","# Example of basic configuration\nActionFramework = ActionFramework::Server.new\n\nnActionFramework.autoimport\nActionFramework.start")
		File.write("#{projectname}/controllers/default_controller.rb","class DefaultController < ActionFramework::Controller
\n	def index\n		erb \"index\" \n    end\nend");
		File.write("#{projectname}/routes.json","{\n \"get\": [{\n    \"/\": \"DefaultController#index\"\n}]\n}")
		File.write("#{projectname}/config/routes.rb","ActionFramework::Server.current.routes do\n\n	get \"/\" => \"DefaultController#index\"\n\nend")
		File.write("#{projectname}/config/settings.rb","ActionFramework::Server.current.settings do |s|\n\nend")
		File.write("#{projectname}/Gemfile","source 'https://rubygems.org'\n\ngem 'actionframework'")
		File.write("#{projectname}/config.ru","require 'actionframework'\n\nrun ActionFramework::Base.new")
		File.write("#{projectname}/config/plugables.rb","# Feature under development")
		File.write("#{projectname}/views/layout.html.erb",File.read(ActionFramework::Gem.root.resources.templates("layout.html.erb").to_s))
		File.write("#{projectname}/views/index.html.erb",File.read(ActionFramework::Gem.root.resources.templates("index.html.erb").to_s))		
		system("cd #{projectname} && bundle install")
		puts "Done"
		puts "Run \"action s\" to run your app"
	end

	desc "Start ActionFramework server"
	def s  
		`rackup`
	end

	desc "Start ActionFramework console"
	def c
		$runningserver = ActionFramework::Server.new
		puts "Starting ActionFramework IRB"
		require 'irb'
		ARGV.clear	
		IRB.start
	end

	desc "Install Stock plugables and add sources list"
	def install_plugables
		puts "Creating plugables directory".blue
		puts "Downloading plugables sources list...".blue
		Dir.mkdir(Dir.home+"/.actionframework/")
		Dir.mkdir(Dir.home+"/.actionframework/plugables/")
		Dir.mkdir(Dir.home+"/.actionframework/plugables/sources/")
		Dir.mkdir(Dir.home+"/.actionframework/plugables/plugs/")
		
		begin
			plugables = HTTParty.get("https://raw.github.com/actionframework/plubables/master/sources.json").body
			File.write(Dir.home+"/.actionframework/plugables/sources/list.json",plugables)
			puts "Downloading stock plugables...".blue
			plugables["stock"].each do |plugable|
				puts "Downloading ".plugable["name"]+"..."
				source = HTTParty.get("https://raw.github.com/actionframework/plugables/master/plugs/"+plugable["name"]+".rb").body
				File.write(Dir.home+"/.actionframework/plugables/plugs/"+plugable["name"],source)
			end
		rescue Exception => e
			puts "ERROR: Something went wrong".red
			puts "ERROR: "+e.message.red
			puts "LOG: "+e.backtrace.inspect
		end
		puts "Done".green
	end	
end

ActionFrameworkCLI.dispatch